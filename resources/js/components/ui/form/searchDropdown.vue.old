<template>
    <div class="form-group">
         <div class="row">
            <div class="col-lg-2 col-md-2"></div>
            <div class="col-lg-8 col-md-8" >
                TEST

                <input type="text" class="form-control " @input="isTyping = true" v-model="searchQuery" placeholder="Search game to add to group(min 3 chars)">
                <ul class="list-group ">
                        <li class="list-group-item" v-for="(item,index) in searchList" :key="item.id" >
                            <i class="fa fa-plus-circle" aria-hidden="true" @click.prevent="addOption(index)"  v-click-outside="closeSearchList"> {{ item.full_name }}</i>
                        </li>
                </ul>



            </div>
            <div class="col-lg-2 col-md-2"></div>
        </div>





        <!--

            v-click-outside="closeSearchList"




        <div class="row">
            <div class="col-lg-2 col-md-2"></div>
            <div class="col-lg-8 col-md-8">
                    <label :for=inputName>{{ tekstLabel }}</label>
                    <select  v-model="selectedOption" class="form-control" :name=inputName :id=inputId  @input="$emit('input', $event.target.value)" >
                        <option :value=0></option>
                        <option v-for="(option) in options" :value="option.id" :key="option.id">{{ option.display }}</option>
                </select>
                <div class="text-danger" v-if="errors">{{ errors[0] }}</div>
            </div>
            <div class="col-lg-2 col-md-2"></div>
        </div>
        -->
    </div>
</template>

<script>
import ClickOutside from 'vue-click-outside'

    export default {
        directives: {
            ClickOutside
        },

         props: {
            searchList: {},
            searchLength: "",
            placeholderText: "",

            methodName: "",

         },

        data () {

            return {
                searchQuery: "",
                isTyping: false,
                value: 0,
                blockClickOutside: false,
            }

        },

        methods: {

            addOption(index){
                //console.log(index);

                //method gives problems
                this.blockClickOutside = true;
                this.$bus.$emit(this.methodName , index);
                this.blockClickOutside = false;
            },


            closeSearchList(){
                console.log("clicked outside");
                    console.log(this.$el);
                    this.searchQuery = "";
                    this.value = 0;
                    //problem with close list when adding an item
                    this.$bus.$emit('dropdownSearch' , "closeList");

            },
        },

        mounted () {


        },

       watch: {
            searchQuery: _.debounce(function() {
                this.isTyping = false;
            }, 1000),
            isTyping: function(value) {
                if (!value && this.searchQuery.length > this.searchLength) {
                    this.$bus.$emit('dropdownSearch', this.searchQuery);
                }
            }
        },
    }
</script>
